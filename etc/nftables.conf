#!/usr/sbin/nft -f

# Simple ruleset for a Tor relay from nftables wiki:
# https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_server

flush ruleset

table inet filter {

    chain input_ipv4 {
        # Accepting ping (icmp-echo-request) for diagnostic purposes.
        # This sample accepts them within a certain rate limit:
        icmp type echo-request limit rate 5/second accept
    }

    chain input_ipv6 {
        # Accept neighbour discovery otherwise connectivity breaks.
        icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept

        # Accepting ping (icmpv6-echo-request) for diagnostic purposes.
        # This sample accepts them within a certain rate limit:
        icmpv6 type echo-request limit rate 5/second accept
    }

    chain input {

        # By default, drop all traffic unless it meets a filter
        # criteria specified by the rules that follow below.
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid.
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Allow loopback traffic.
        iifname lo accept

        # Jump to chain according to layer 3 protocol using a verdict map.
        meta protocol vmap { ip : jump input_ipv4, ip6 : jump input_ipv6 }

        # Allow SSH on port TCP/22 and allow HTTP(S) TCP/80 and TCP/443
        # for IPv4 and IPv6. (Our Tor DirPort & ORPort)
        tcp dport { 22, 80, 443 } accept

        # Uncomment to enable logging of denied inbound traffic.
        # log prefix "[nftables] Inbound Denied: " counter drop
    }

    chain forward {
        # Drop everything (assumes this device is not a router)
        type filter hook forward priority 0; policy drop;
    }

    # No need to define output chain, default policy is accept if undefined.
}
